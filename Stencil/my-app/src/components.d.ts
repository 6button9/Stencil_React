/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { My404 as My404 } from './components/my-404/my-404';

interface HTMLMy404Element extends My404, HTMLElement {
}
declare var HTMLMy404Element: {
  prototype: HTMLMy404Element;
  new (): HTMLMy404Element;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-404": HTMLMy404Element;
  }
  interface ElementTagNameMap {
      "my-404": HTMLMy404Element;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-404": JSXElements.My404Attributes;
      }
  }
  namespace JSXElements {
      export interface My404Attributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          icon?: string,
          title?: string
      }
  }
}

import { MyApp as MyApp } from './components/my-app/my-app';

interface HTMLMyAppElement extends MyApp, HTMLElement {
}
declare var HTMLMyAppElement: {
  prototype: HTMLMyAppElement;
  new (): HTMLMyAppElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
      "my-app": HTMLMyAppElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-app": JSXElements.MyAppAttributes;
      }
  }
  namespace JSXElements {
      export interface MyAppAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          helloF?: any,
          title?: string
      }
  }
}

import { MyCalculator as MyCalculator } from './components/my-calculator/my-calculator';

interface HTMLMyCalculatorElement extends MyCalculator, HTMLElement {
}
declare var HTMLMyCalculatorElement: {
  prototype: HTMLMyCalculatorElement;
  new (): HTMLMyCalculatorElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-calculator": HTMLMyCalculatorElement;
  }
  interface ElementTagNameMap {
      "my-calculator": HTMLMyCalculatorElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-calculator": JSXElements.MyCalculatorAttributes;
      }
  }
  namespace JSXElements {
      export interface MyCalculatorAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyCheckList as MyCheckList } from './components/my-check-list/my-check-list';

interface HTMLMyCheckListElement extends MyCheckList, HTMLElement {
}
declare var HTMLMyCheckListElement: {
  prototype: HTMLMyCheckListElement;
  new (): HTMLMyCheckListElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-check-list": HTMLMyCheckListElement;
  }
  interface ElementTagNameMap {
      "my-check-list": HTMLMyCheckListElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-check-list": JSXElements.MyCheckListAttributes;
      }
  }
  namespace JSXElements {
      export interface MyCheckListAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          checkList?: any,
          setValue?: any
      }
  }
}

import { MyClock as MyClock } from './components/my-clock/my-clock';

interface HTMLMyClockElement extends MyClock, HTMLElement {
}
declare var HTMLMyClockElement: {
  prototype: HTMLMyClockElement;
  new (): HTMLMyClockElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-clock": HTMLMyClockElement;
  }
  interface ElementTagNameMap {
      "my-clock": HTMLMyClockElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-clock": JSXElements.MyClockAttributes;
      }
  }
  namespace JSXElements {
      export interface MyClockAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyContent as MyContent } from './components/my-content/my-content';

interface HTMLMyContentElement extends MyContent, HTMLElement {
}
declare var HTMLMyContentElement: {
  prototype: HTMLMyContentElement;
  new (): HTMLMyContentElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-content": HTMLMyContentElement;
  }
  interface ElementTagNameMap {
      "my-content": HTMLMyContentElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-content": JSXElements.MyContentAttributes;
      }
  }
  namespace JSXElements {
      export interface MyContentAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          type?: string
      }
  }
}

import { MyDecTest as MyDecTest } from './components/my-dec-test/my-dec-test';

interface HTMLMyDecTestElement extends MyDecTest, HTMLElement {
}
declare var HTMLMyDecTestElement: {
  prototype: HTMLMyDecTestElement;
  new (): HTMLMyDecTestElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-dec-test": HTMLMyDecTestElement;
  }
  interface ElementTagNameMap {
      "my-dec-test": HTMLMyDecTestElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-dec-test": JSXElements.MyDecTestAttributes;
      }
  }
  namespace JSXElements {
      export interface MyDecTestAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyDropIn as MyDropIn } from './components/my-drop-in/my-drop-in';

interface HTMLMyDropInElement extends MyDropIn, HTMLElement {
}
declare var HTMLMyDropInElement: {
  prototype: HTMLMyDropInElement;
  new (): HTMLMyDropInElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-drop-in": HTMLMyDropInElement;
  }
  interface ElementTagNameMap {
      "my-drop-in": HTMLMyDropInElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-drop-in": JSXElements.MyDropInAttributes;
      }
  }
  namespace JSXElements {
      export interface MyDropInAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          parents?: any,
          handleAction?: any
      }
  }
}

import { MyFooter as MyFooter } from './components/my-footer/my-footer';

interface HTMLMyFooterElement extends MyFooter, HTMLElement {
}
declare var HTMLMyFooterElement: {
  prototype: HTMLMyFooterElement;
  new (): HTMLMyFooterElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-footer": HTMLMyFooterElement;
  }
  interface ElementTagNameMap {
      "my-footer": HTMLMyFooterElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-footer": JSXElements.MyFooterAttributes;
      }
  }
  namespace JSXElements {
      export interface MyFooterAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          menus?: any,
          parents?: any,
          handleAction?: any
      }
  }
}

import { MyGetCCW as MyGetCcw } from './components/my-get-CCW/my-CCW';

interface HTMLMyGetCcwElement extends MyGetCcw, HTMLElement {
}
declare var HTMLMyGetCcwElement: {
  prototype: HTMLMyGetCcwElement;
  new (): HTMLMyGetCcwElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-get-ccw": HTMLMyGetCcwElement;
  }
  interface ElementTagNameMap {
      "my-get-ccw": HTMLMyGetCcwElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-get-ccw": JSXElements.MyGetCcwAttributes;
      }
  }
  namespace JSXElements {
      export interface MyGetCcwAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          setValue?: any
      }
  }
}

import { GetCardNum as MyGetCardNum } from './components/my-get-card-num/my-get-card-num';

interface HTMLMyGetCardNumElement extends MyGetCardNum, HTMLElement {
}
declare var HTMLMyGetCardNumElement: {
  prototype: HTMLMyGetCardNumElement;
  new (): HTMLMyGetCardNumElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-get-card-num": HTMLMyGetCardNumElement;
  }
  interface ElementTagNameMap {
      "my-get-card-num": HTMLMyGetCardNumElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-get-card-num": JSXElements.MyGetCardNumAttributes;
      }
  }
  namespace JSXElements {
      export interface MyGetCardNumAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          setValue?: any
      }
  }
}

import { MyGetCard as MyGetCard } from './components/my-get-card/my-get-card';

interface HTMLMyGetCardElement extends MyGetCard, HTMLElement {
}
declare var HTMLMyGetCardElement: {
  prototype: HTMLMyGetCardElement;
  new (): HTMLMyGetCardElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-get-card": HTMLMyGetCardElement;
  }
  interface ElementTagNameMap {
      "my-get-card": HTMLMyGetCardElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-get-card": JSXElements.MyGetCardAttributes;
      }
  }
  namespace JSXElements {
      export interface MyGetCardAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyGetExpDate as MyGetExpDate } from './components/my-get-exp-date/my-get-exp-date';

interface HTMLMyGetExpDateElement extends MyGetExpDate, HTMLElement {
}
declare var HTMLMyGetExpDateElement: {
  prototype: HTMLMyGetExpDateElement;
  new (): HTMLMyGetExpDateElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-get-exp-date": HTMLMyGetExpDateElement;
  }
  interface ElementTagNameMap {
      "my-get-exp-date": HTMLMyGetExpDateElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-get-exp-date": JSXElements.MyGetExpDateAttributes;
      }
  }
  namespace JSXElements {
      export interface MyGetExpDateAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          setValue?: any
      }
  }
}

import { GetName as MyGetName } from './components/my-get-name/my-get-name';

interface HTMLMyGetNameElement extends MyGetName, HTMLElement {
}
declare var HTMLMyGetNameElement: {
  prototype: HTMLMyGetNameElement;
  new (): HTMLMyGetNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-get-name": HTMLMyGetNameElement;
  }
  interface ElementTagNameMap {
      "my-get-name": HTMLMyGetNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-get-name": JSXElements.MyGetNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyGetNameAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          setValue?: any
      }
  }
}

import { MyHeader as MyHeader } from './components/my-header/my-header';

interface HTMLMyHeaderElement extends MyHeader, HTMLElement {
}
declare var HTMLMyHeaderElement: {
  prototype: HTMLMyHeaderElement;
  new (): HTMLMyHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-header": HTMLMyHeaderElement;
  }
  interface ElementTagNameMap {
      "my-header": HTMLMyHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-header": JSXElements.MyHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface MyHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          menus?: any,
          parents?: any,
          handleAction?: any
      }
  }
}

import { MyName as MyName } from './components/my-name/my-name';

interface HTMLMyNameElement extends MyName, HTMLElement {
}
declare var HTMLMyNameElement: {
  prototype: HTMLMyNameElement;
  new (): HTMLMyNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  interface ElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-name": JSXElements.MyNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyNameAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          first?: string,
          last?: string
      }
  }
}

import { MyPlayer as MyPlayer } from './components/my-player/my-player';

interface HTMLMyPlayerElement extends MyPlayer, HTMLElement {
}
declare var HTMLMyPlayerElement: {
  prototype: HTMLMyPlayerElement;
  new (): HTMLMyPlayerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-player": HTMLMyPlayerElement;
  }
  interface ElementTagNameMap {
      "my-player": HTMLMyPlayerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-player": JSXElements.MyPlayerAttributes;
      }
  }
  namespace JSXElements {
      export interface MyPlayerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          x?: number,
          y?: number,
          title?: string,
          shareTargets?: any
      }
  }
}

import { MyProfile as MyProfile } from './components/my-profile/my-profile';

interface HTMLMyProfileElement extends MyProfile, HTMLElement {
}
declare var HTMLMyProfileElement: {
  prototype: HTMLMyProfileElement;
  new (): HTMLMyProfileElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-profile": HTMLMyProfileElement;
  }
  interface ElementTagNameMap {
      "my-profile": HTMLMyProfileElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-profile": JSXElements.MyProfileAttributes;
      }
  }
  namespace JSXElements {
      export interface MyProfileAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyShareButton as MyShareButton } from './components/my-share-button/my-share-button';

interface HTMLMyShareButtonElement extends MyShareButton, HTMLElement {
}
declare var HTMLMyShareButtonElement: {
  prototype: HTMLMyShareButtonElement;
  new (): HTMLMyShareButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-share-button": HTMLMyShareButtonElement;
  }
  interface ElementTagNameMap {
      "my-share-button": HTMLMyShareButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-share-button": JSXElements.MyShareButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface MyShareButtonAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          shareTargets?: any
      }
  }
}

import { MySidebar as MySidebar } from './components/my-sidebar/my-sidebar';

interface HTMLMySidebarElement extends MySidebar, HTMLElement {
}
declare var HTMLMySidebarElement: {
  prototype: HTMLMySidebarElement;
  new (): HTMLMySidebarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-sidebar": HTMLMySidebarElement;
  }
  interface ElementTagNameMap {
      "my-sidebar": HTMLMySidebarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-sidebar": JSXElements.MySidebarAttributes;
      }
  }
  namespace JSXElements {
      export interface MySidebarAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          menus?: any,
          parents?: any,
          handleAction?: any
      }
  }
}

import { Signup as MySignup } from './components/my-signup/my-signup';

interface HTMLMySignupElement extends MySignup, HTMLElement {
}
declare var HTMLMySignupElement: {
  prototype: HTMLMySignupElement;
  new (): HTMLMySignupElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-signup": HTMLMySignupElement;
  }
  interface ElementTagNameMap {
      "my-signup": HTMLMySignupElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-signup": JSXElements.MySignupAttributes;
      }
  }
  namespace JSXElements {
      export interface MySignupAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { TodoList as MyTodo } from './components/my-todo/my-todo';

interface HTMLMyTodoElement extends MyTodo, HTMLElement {
}
declare var HTMLMyTodoElement: {
  prototype: HTMLMyTodoElement;
  new (): HTMLMyTodoElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-todo": HTMLMyTodoElement;
  }
  interface ElementTagNameMap {
      "my-todo": HTMLMyTodoElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-todo": JSXElements.MyTodoAttributes;
      }
  }
  namespace JSXElements {
      export interface MyTodoAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

