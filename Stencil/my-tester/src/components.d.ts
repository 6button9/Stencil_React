/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { MyApp as MyApp } from './components/my-app/my-app';

interface HTMLMyAppElement extends MyApp, HTMLElement {
}
declare var HTMLMyAppElement: {
  prototype: HTMLMyAppElement;
  new (): HTMLMyAppElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
      "my-app": HTMLMyAppElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-app": JSXElements.MyAppAttributes;
      }
  }
  namespace JSXElements {
      export interface MyAppAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { MyCheckList as MyCheckList } from './components/my-check-list/my-check-list';

interface HTMLMyCheckListElement extends MyCheckList, HTMLElement {
}
declare var HTMLMyCheckListElement: {
  prototype: HTMLMyCheckListElement;
  new (): HTMLMyCheckListElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-check-list": HTMLMyCheckListElement;
  }
  interface ElementTagNameMap {
      "my-check-list": HTMLMyCheckListElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-check-list": JSXElements.MyCheckListAttributes;
      }
  }
  namespace JSXElements {
      export interface MyCheckListAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          checkList?: any,
          setValue?: any
      }
  }
}

import { MyParent as MyChild } from './components/my-child/my-child';

interface HTMLMyChildElement extends MyChild, HTMLElement {
}
declare var HTMLMyChildElement: {
  prototype: HTMLMyChildElement;
  new (): HTMLMyChildElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-child": HTMLMyChildElement;
  }
  interface ElementTagNameMap {
      "my-child": HTMLMyChildElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-child": JSXElements.MyChildAttributes;
      }
  }
  namespace JSXElements {
      export interface MyChildAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyEmitter as MyEmitter } from './components/my-emitter/my-emitter';

interface HTMLMyEmitterElement extends MyEmitter, HTMLElement {
}
declare var HTMLMyEmitterElement: {
  prototype: HTMLMyEmitterElement;
  new (): HTMLMyEmitterElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-emitter": HTMLMyEmitterElement;
  }
  interface ElementTagNameMap {
      "my-emitter": HTMLMyEmitterElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-emitter": JSXElements.MyEmitterAttributes;
      }
  }
  namespace JSXElements {
      export interface MyEmitterAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyForm as MyForm } from './components/my-form/my-form';

interface HTMLMyFormElement extends MyForm, HTMLElement {
}
declare var HTMLMyFormElement: {
  prototype: HTMLMyFormElement;
  new (): HTMLMyFormElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-form": HTMLMyFormElement;
  }
  interface ElementTagNameMap {
      "my-form": HTMLMyFormElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-form": JSXElements.MyFormAttributes;
      }
  }
  namespace JSXElements {
      export interface MyFormAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { MyGramps as MyGramps } from './components/my-gramps/my-gramps';

interface HTMLMyGrampsElement extends MyGramps, HTMLElement {
}
declare var HTMLMyGrampsElement: {
  prototype: HTMLMyGrampsElement;
  new (): HTMLMyGrampsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-gramps": HTMLMyGrampsElement;
  }
  interface ElementTagNameMap {
      "my-gramps": HTMLMyGrampsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-gramps": JSXElements.MyGrampsAttributes;
      }
  }
  namespace JSXElements {
      export interface MyGrampsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyHeader as MyHeader } from './components/my-header/my-header';

interface HTMLMyHeaderElement extends MyHeader, HTMLElement {
}
declare var HTMLMyHeaderElement: {
  prototype: HTMLMyHeaderElement;
  new (): HTMLMyHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-header": HTMLMyHeaderElement;
  }
  interface ElementTagNameMap {
      "my-header": HTMLMyHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-header": JSXElements.MyHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface MyHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { MyHooks as MyHooks } from './components/my-hooks/my-hooks';

interface HTMLMyHooksElement extends MyHooks, HTMLElement {
}
declare var HTMLMyHooksElement: {
  prototype: HTMLMyHooksElement;
  new (): HTMLMyHooksElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-hooks": HTMLMyHooksElement;
  }
  interface ElementTagNameMap {
      "my-hooks": HTMLMyHooksElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-hooks": JSXElements.MyHooksAttributes;
      }
  }
  namespace JSXElements {
      export interface MyHooksAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyListener as MyListener } from './components/my-listener/my-listener';

interface HTMLMyListenerElement extends MyListener, HTMLElement {
}
declare var HTMLMyListenerElement: {
  prototype: HTMLMyListenerElement;
  new (): HTMLMyListenerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-listener": HTMLMyListenerElement;
  }
  interface ElementTagNameMap {
      "my-listener": HTMLMyListenerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-listener": JSXElements.MyListenerAttributes;
      }
  }
  namespace JSXElements {
      export interface MyListenerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { MyName as MyName } from './components/my-name/my-name';

interface HTMLMyNameElement extends MyName, HTMLElement {
}
declare var HTMLMyNameElement: {
  prototype: HTMLMyNameElement;
  new (): HTMLMyNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  interface ElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-name": JSXElements.MyNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyNameAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          postToConsole?: any,
          first?: string,
          last?: string
      }
  }
}

import { MyParent as MyParent } from './components/my-parent/my-parent';

interface HTMLMyParentElement extends MyParent, HTMLElement {
}
declare var HTMLMyParentElement: {
  prototype: HTMLMyParentElement;
  new (): HTMLMyParentElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-parent": HTMLMyParentElement;
  }
  interface ElementTagNameMap {
      "my-parent": HTMLMyParentElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-parent": JSXElements.MyParentAttributes;
      }
  }
  namespace JSXElements {
      export interface MyParentAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { MyPortalEl as MyPortalEl } from './components/my-portal-el/my-portal-el';

interface HTMLMyPortalElElement extends MyPortalEl, HTMLElement {
}
declare var HTMLMyPortalElElement: {
  prototype: HTMLMyPortalElElement;
  new (): HTMLMyPortalElElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-portal-el": HTMLMyPortalElElement;
  }
  interface ElementTagNameMap {
      "my-portal-el": HTMLMyPortalElElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-portal-el": JSXElements.MyPortalElAttributes;
      }
  }
  namespace JSXElements {
      export interface MyPortalElAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          portalId?: string,
          x?: number,
          y?: number,
          bgColor?: string
      }
  }
}

import { MyPortal as MyPortal } from './components/my-portal/my-portal';

interface HTMLMyPortalElement extends MyPortal, HTMLElement {
}
declare var HTMLMyPortalElement: {
  prototype: HTMLMyPortalElement;
  new (): HTMLMyPortalElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-portal": HTMLMyPortalElement;
  }
  interface ElementTagNameMap {
      "my-portal": HTMLMyPortalElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-portal": JSXElements.MyPortalAttributes;
      }
  }
  namespace JSXElements {
      export interface MyPortalAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          portalId?: string,
          x?: number,
          y?: number,
          bgColor?: string
      }
  }
}

import { MyParent as MySelect } from './components/my-select/my-select';

interface HTMLMySelectElement extends MySelect, HTMLElement {
}
declare var HTMLMySelectElement: {
  prototype: HTMLMySelectElement;
  new (): HTMLMySelectElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-select": HTMLMySelectElement;
  }
  interface ElementTagNameMap {
      "my-select": HTMLMySelectElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-select": JSXElements.MySelectAttributes;
      }
  }
  namespace JSXElements {
      export interface MySelectAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          selections?: any
      }
  }
}

